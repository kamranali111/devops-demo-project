pipeline {
  agent any

    environment {
        SONAR_PROJECT_KEY = 'devops-demo-project'
        SONAR_SCANNER = 'sonar-scanner' // SonarQube Scanner installed in Jenkins
    }
  
  
  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/kamranali111/devops-demo-project.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd demo-java-app && mvn clean package'
      }
    }

            stage('Static Code Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    script {
                        sh """
                        ${SONAR_SCANNER} \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.sources=.
                        """
                    }
                }
            }
        }


    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "deepakkr35/demo-java-app:${build_version}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
      }
      steps {
        script {
            sh 'cd demo-java-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                dockerImage.push()
            }
        }
      }
    }


    stage('Build and Push Docker Image') {
    steps {
        script {
            // Build the Docker image
            docker.build("${DOCKER_IMAGE_NAME}:${TAG}")
            
            // Push the Docker image to DockerHub
            withDockerRegistry(credentialsId: env.DOCKER_HUB_CREDENTIAL_ID, url: 'https://index.docker.io/v1/') {
                docker.image("${DOCKER_IMAGE_NAME}:${TAG}").push()
            }
        }
    }
}

    
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "devops-demo-project"
            GIT_USER_NAME = "deepakkr35"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "deepakkr35@gmail.com"
                    git config user.name "Deepak Kumar"
                    sed -i "s/tag: .*/tag: \"${build_version}\"/" helm/app/values.yaml
                    git add helm/app/values.yaml
                    git commit -m "Update deployment image to version ${build_version}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
